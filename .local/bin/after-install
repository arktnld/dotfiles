#!/bin/sh
# After install script automation.
# Inspired by Luke Smith's Larbs config script.

dotfilesrepo="https://github.com/arktnld/dotfiles.git"
progsfile="https://raw.githubusercontent.com/arktnld/dotfiles/master/.config/progs.csv"
aurhelper="paru"
repobranch="master"
name="arktnld"
pass="npndtdes"


### FUNCTIONS ###

adduserandpass() { \
	# Adds user `$name` with password $pass1.
	echo "Adding user \"$name\"..."
	useradd -m -g wheel -s /bin/zsh "$name" >/dev/null 2>&1 ||
	usermod -a -G wheel "$name" && mkdir -p /home/"$name" && chown "$name":wheel /home/"$name"
	echo "$name:$pass" | chpasswd
	unset pass ;}

installpkg(){ pacman --noconfirm --needed -S "$1" >/dev/null 2>&1 ; }
newperms() { echo "$*" >> /etc/sudoers ; } # Set special sudoers settings for install (or after).

chaoticrepoinstall() { #
    echo "Enable Chaotic-AUR Repository..."
    pacman-key --recv-key 3056513887B78AEB --keyserver keyserver.ubuntu.com >/dev/null 2>&1
    echo "Installing Chaotic Primary Key..."
    pacman-key --lsign-key 3056513887B78AEB >/dev/null 2>&1
    echo "Installing Chaotic keyring and mirrorlist..."
    wget 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-keyring.pkg.tar.zst' >/dev/null 2>&1
    wget 'https://cdn-mirror.chaotic.cx/chaotic-aur/chaotic-mirrorlist.pkg.tar.zst' >/dev/null 2>&1
    pacman --noconfirm -U chaotic-keyring.pkg.tar.zst chaotic-mirrorlist.pkg.tar.zst >/dev/null 2>&1
    rm chaotic-keyring.pkg.tar.zst chaotic-mirrorlist.pkg.tar.zst >/dev/null 2>&1
    echo "Append Chaotic to /etc/pacman.conf..."
    echo -e "\n[chaotic-aur]\nInclude = /etc/pacman.d/chaotic-mirrorlist" >> /etc/pacman.conf
    echo "Updating mirrorlist..."
    pacman -Sy >/dev/null 2>&1
}

maininstall() { # Installs all needed programs from main repo.
	echo "$1, $2 "
    $aurhelper --noconfirm --needed -S "$1" >/dev/null 2>&1
}

installationloop() { \
        echo "Installing \"$aurhelper\" AUR Helper..."
        installpkg "$aurhelper"
	echo "Installing main and user repository programs...."
	([ -f "$progsfile" ] && cp "$progsfile" /tmp/progs.csv) || curl -Ls "$progsfile" | sed '/^#/d' > /tmp/progs.csv
	while IFS=, read -r tag program comment; do
		n=$((n+1))
		echo "$comment" | grep -q "^\".*\"$" && comment="$(echo "$comment" | sed "s/\(^\"\|\"$\)//g")"
		maininstall "$program" "$comment"
	done < /tmp/progs.csv ;
}

putgitrepo() { # Downloads a gitrepo $1 and places the files in $2 only overwriting conflicts
	echo "Downloading and installing config files..."
	[ -z "$3" ] && branch="master" || branch="$repobranch"
	dir=$(mktemp -d)
	[ ! -d "$2" ] && mkdir -p "$2"
	chown "$name":wheel "$dir" "$2"
	sudo -u "$name" git clone --recursive -b "$branch" --depth 1 --recurse-submodules "$1" "$dir" >/dev/null 2>&1
	sudo -u "$name" cp -rfT "$dir" "$2"
}


### INITIAL SETUP ###

echo "Starting ´After Install´ script setup.";

echo "Refreshing Arch Keyring..."
pacman --noconfirm -S archlinux-keyring >/dev/null 2>&1

echo "Installing programs needed for setup..."
for x in curl base-devel git ntp zsh reflector; do
	echo "Installing $x package."
	installpkg "$x"
done

echo "Synchronizing system time to ensure secure installation..."
ntpdate 0.br.pool.ntp.org >/dev/null 2>&1

echo "Make zsh the default shell for the user..."
chsh -s /bin/zsh "$name" >/dev/null 2>&1

### CONFIG FILES ###
echo "Config password permission, pacman, keyboard and mirrorlist..."
[ -f /etc/sudoers.pacnew ] && cp /etc/sudoers.pacnew /etc/sudoers # Just in case
newperms "%wheel ALL=(ALL) NOPASSWD: ALL" # Allow user to run sudo without password. Since AUR programs must be installed
sed -i "s/^#ParallelDownloads/ParallelDownloads/;s/^#Color$/Color/;s/^#ILoveCandy/ILoveCandy/" /etc/pacman.conf
echo -e "Section \"InputClass\"\n\tIdentifier \"system-keyboard\"\n\tMatchIsKeyboard \"on\"\n\tOption \"XkbLayout\" \"br\"\nEndSection" >> /etc/X11/xorg.conf.d/00-keyboard.conf
reflector -c Brazil --save /etc/pacman.d/mirrorlist # Create a mirrorlist file with the best mirrors from a given country.

### THE ACTUAL SCRIPT ###

adduserandpass
chaoticrepoinstall
installationloop # The command that does all the install using the progs.csv file.
putgitrepo "$dotfilesrepo" "/home/$name" "$repobranch" # Install the dotfiles in the user's home directory

### INSTALL COMPLETE ###

echo "All done! Congrats! The script completed successfully.";
echo "Press enter to exit..."; read -r
